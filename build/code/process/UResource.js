// Generated by CoffeeScript 1.6.3
var BundleFile, Dependency, ModuleGeneratorTemplates, ModuleManipulator, UError, UResource, fs, l, upath, _, _B,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('lodash');

fs = require('fs');

_B = require('uberscore');

l = new _B.Logger('urequire/UResource');

upath = require('../paths/upath');

ModuleGeneratorTemplates = require('../templates/ModuleGeneratorTemplates');

ModuleManipulator = require("../moduleManipulation/ModuleManipulator");

Dependency = require("../Dependency");

BundleFile = require('./BundleFile');

UError = require('../utils/UError');

/*
  Represents any *textual* resource (including but not limited to js-convertable code).

  Each time it `@refresh()`es,
    if `@source` (content) in file is changed, its passed through all @converters:
    - stores .convert(@source) result as @converted
    - stores .dstFilename(@filname) result as @dstFilename
*/


UResource = (function(_super) {
  __extends(UResource, _super);

  Function.prototype.property = function(p) {
    var d, n;
    for (n in p) {
      d = p[n];
      Object.defineProperty(this.prototype, n, d);
    }
    return null;
  };

  /*
  @param {Object} bundle The Bundle where this URersource belongs
  @param {String} filename, bundleRelative eg 'models/PersonModel.coffee'
  @param {Array<?>} converters The converters (bundle.resources) that matched this filename & are used in turn to convert, each time we `refresh()`
  */


  function UResource(bundle, filename, converters) {
    this.bundle = bundle;
    this.filename = filename;
    this.converters = converters;
    UResource.__super__.constructor.apply(this, arguments);
  }

  /*
    Check if source (AS IS eg js, coffee, LESS etc) has changed
    and convert it passing throught all @converters
  
    @return true if there was a change (and convertions took place) and note as @hasChanged
            false otherwise
  */


  UResource.prototype.refresh = function() {
    var converter, err, source, uerr, _i, _len, _ref;
    if (!UResource.__super__.refresh.apply(this, arguments)) {
      return false;
    } else {
      source = void 0;
      try {
        source = fs.readFileSync(this.srcFilepath, 'utf-8');
      } catch (_error) {
        err = _error;
        this.hasErrors = true;
        throw new UError("Error reading file '" + this.srcFilepath + "'", {
          nested: err
        });
      }
      try {
        if (source && (this.source !== source)) {
          this.source = this.converted = source;
          this.dstFilename = this.filename;
          _ref = this.converters;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            converter = _ref[_i];
            if (_.isFunction(converter.convert)) {
              if (l.deb(60)) {
                l.debug("Converting '" + this.dstFilename + "' with '" + converter.name + "'...");
              }
              this.converted = converter.convert(this.converted, this.dstFilename);
            }
            switch (_B.type(converter.dstFilename)) {
              case 'Function':
                this.dstFilename = converter.dstFilename(this.dstFilename);
                break;
              case 'String':
                this.dstFilename = upath.changeExt(this.dstFilename, converter.dstFilename);
            }
            if (l.deb(95)) {
              l.debug("...resource.dstFilename is '" + this.dstFilename + "'");
            }
          }
          this.hasErrors = false;
          return this.hasChanged = true;
        } else {
          if (l.deb(90)) {
            l.debug("No changes in source of resource '" + this.filename + "' ");
          }
          return this.hasChanged = false;
        }
      } catch (_error) {
        err = _error;
        this.hasErrors = true;
        l.err(uerr = "Error converting '" + this.filename + "' with converter '" + (converter != null ? converter.name : void 0) + "'.");
        throw new UError(uerr, {
          nested: err
        });
      }
    }
  };

  UResource.prototype.reset = function() {
    UResource.__super__.reset.apply(this, arguments);
    delete this.source;
    return delete this.converted;
  };

  return UResource;

})(BundleFile);

module.exports = UResource;

/* Debug information*/

