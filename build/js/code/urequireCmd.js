// Generated by CoffeeScript 1.4.0
var Build, CMDOPTIONS, Logger, config, l, tmplt, toArray, upath, urequireCmd, _, _B, _fn, _fs, _i, _len, _ref, _wrench;

_ = require('lodash');

_B = require('uberscore');

_fs = require('fs');

_wrench = require("wrench");

urequireCmd = require('commander');

upath = require('./paths/upath');

Build = require('./process/Build');

Logger = require('./utils/Logger');

l = new Logger('urequireCMD');

toArray = function(val) {
  return val.split(',');
};

config = {};

urequireCmd.version(l.VERSION).option('-o, --outputPath <outputPath>', 'Output converted files onto this directory').option('-f, --forceOverwriteSources', 'Overwrite *source* files (-o not needed & ignored)', void 0).option('-v, --verbose', 'Print module processing information', void 0).option('-d, --debugLevel <debugLevel>', 'Pring debug information (0-100)', void 0).option('-n, --noExports', 'Ignore all web `rootExports` in module definitions', void 0).option('-r, --webRootMap <webRootMap>', "Where to map `/` when running in node. On RequireJS its http-server's root. Can be absolute or relative to bundle. Defaults to bundle.", void 0).option('-s, --scanAllow', "By default, ALL require('') deps appear on []. to prevent RequireJS to scan @ runtime. With --s you can allow `require('')` scan @ runtime, for source modules that have no [] deps (eg nodejs source modules).", void 0).option('-a, --allNodeRequires', 'Pre-require all deps on node, even if they arent mapped to parameters, just like in AMD deps []. Preserves same loading order, but a possible slower starting up. They are cached nevertheless, so you might gain speed later.', void 0).option('-t, --template <template>', 'Template (AMD, UMD, nodejs), to override a `configFile` setting. Should use ONLY with `config`', void 0).option('-C --continue', 'NOT IMPLEMENTED Dont bail out while processing (mainly on module processing errors)', void 0).option('-u, --uglify', 'NOT IMPLEMENTED. Pass through uglify before saving.', void 0).option('-w, --watch', 'NOT IMPLEMENTED. Watch for changes in bundle files and reprocess those changed files.', void 0).option('-i, --include', "NOT IMPLEMENTED. Process only modules/files in filters - comma seprated list/Array of Strings or Regexp's", toArray).option('-j, --jsonOnly', 'NOT IMPLEMENTED. Output everything on stdout using json only. Usefull if you are building build tools', void 0).option('-e, --verifyExternals', 'NOT IMPLEMENTED. Verify external dependencies exist on file system.', void 0);

_ref = Build.templates;
_fn = function(tmplt) {
  return urequireCmd.command("" + tmplt + " <bundlePath>").description("Converts all modules in <bundlePath> using '" + tmplt + "' template.").action(function(bundlePath) {
    config.template = tmplt;
    return config.bundlePath = bundlePath;
  });
};
for (_i = 0, _len = _ref.length; _i < _len; _i++) {
  tmplt = _ref[_i];
  _fn(tmplt);
}

urequireCmd.command('config <configFiles...>').action(function(cfgFiles) {
  return config.configFiles = toArray(cfgFiles);
});

urequireCmd.on('--help', function() {
  l.log("Examples:\n                                                                \u001b[32m\n  $ urequire UMD path/to/amd/moduleBundle -o umd/moduleBundle   \u001b[0m\n                  or                                            \u001b[32m\n  $ urequire AMD path/to/moduleBundle -f                        \u001b[0m\n                  or                                            \u001b[32m\n  $ urequire config path/to/configFile.json,anotherConfig.js    \u001b[0m\n\nModule files in your bundle can conform to the standard AMD format:\n    // standard anonymous modules format                  \u001b[33m\n  - define(['dep1', 'dep2'], function(dep1, dep2) {...})  \u001b[0m\n                          or\n    // named modules also work, but are NOT recommended                 \u001b[33m\n  - define('moduleName', ['dep1', 'dep2'], function(dep1, dep2) {...})  \u001b[0m\n\n  A 'relaxed' format can be used, see the docs.\n\nAlternativelly modules can use the nodejs module format:\n  - var dep1 = require('dep1');\n    var dep2 = require('dep2');\n    ...\n    module.exports = {my: 'module'}\n\nNotes:\n  --forceOverwriteSources (-f) is useful if your sources are not `real sources`\n    eg. you use coffeescript :-).\n    WARNING: -f ignores --outputPath\n\n  --Your modules (& config files) can be written in coffeescript (more will follow)");
  return l.verbose("uRequire version " + l.VERSION);
});

urequireCmd.parse(process.argv);

CMDOPTIONS = _.map(urequireCmd.options, function(o) {
  return o.long.slice(2);
});

_.extend(config, _.pick(urequireCmd, CMDOPTIONS));

delete config.version;

if (_.isEmpty(config)) {
  l.verbose("uRequire version " + l.VERSION);
  l.err("No CMD options or config file specified.\nNot looking for any default config file in this uRequire version.\nType -h if U R after help!\"");
} else {
  if (config.verbose || true) {
    l.verbose('uRequireCmd called with cmdConfig=\n', config);
  }
  new (require('./urequire')).BundleBuilder(config);
}
