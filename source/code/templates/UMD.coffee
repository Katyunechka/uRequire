pathRelative = require('../utils/pathRelative')
_ = require 'lodash'
#
#  A 'simple' template for a UMD module. Based on https://github.com/umdjs/umd/blob/master/returnExportsGlobal.js
#
#  @param d {Object} with
#   {
#     modulePath: where the module is, within bundle
#     type: 'define' or 'require'
#     arrayDependencies: Array of deps, as delcared in AMD, filerelative (eg '../PersonView' for 'views/PersonView') + all `require('dep')`
#     nodeDependencies: Array for file-relative dependencies, as required by node (eg '../PersonView')
#     parameters: Array of parameter names, as declared on the original AMD.
#     rootExport: the name of the root variable to export on the browser side (or false/absent)
#     factoryBody: The actual code that returns our module (define) or just runs some code having dependencies resolved (require).
#  }
#
#todo: recognise define [], -> or require [], -> and adjust both node & browser UMD accordingly
#todo: make unit tests

UMDtemplate = (d)->
  """
  // Generated by urequire v#{d.version}
  (function (root, factory) {
      if (typeof exports === 'object') {
          var nr = new (require('urequire').NodeRequirer) ('#{d.modulePath}', __dirname, '#{d.webRootMap}');
          module.exports = factory(nr.require#{
            if (d.moduleType is 'node') then ', exports, module' else ''}#{
            (", nr.require('#{nDep}')" for nDep in d.nodeDependencies).join('')});
      } else if (typeof define === 'function' && define.amd) {
          define(#{
            if d.moduleName
              "'" + d.moduleName +"', "
            else ""
           }#{if _(d.arrayDependencies).isEmpty()
                "" #keep [] empty, enabling requirejs scan
              else
                if (d.moduleType is 'node')
                  "['require', 'module', 'exports'"
                else
                  "['require'"
              }#{(", '#{dep}'" for dep in d.arrayDependencies).join('')}#{
              if _(d.arrayDependencies).isEmpty() then "" else "], "}#{
              if d.rootExport # Adds browser/root globals if needed
                "function (require#{(', ' + par for par in d.parameters).join('')}) { \n" +
                "            return (root.#{d.rootExport} = factory(require#{
                                (', ' + par for par in d.parameters).join('')
                }));\n        });"
              else
                'factory);'
          }
      }
  })(this, function (require#{if (d.moduleType is 'node') then ', exports, module' else ''}#{
    (", #{par}" for par in d.parameters).join ''}) {
      var isWeb = (typeof define === 'function' && define.amd);
      var isNode = !isWeb;

  #{d.factoryBody}
  #{if (d.moduleType is 'node') then 'return module.exports;' else ''}
  });
  """

module.exports = UMDtemplate