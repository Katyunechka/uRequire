pathRelative = require('../utils/pathRelative')
#
#  A 'simple' template for a UMD module. Based on https://github.com/umdjs/umd/blob/master/returnExportsGlobal.js
#
#  @param d {Object} with
#   {
#     modulePath: where the module is, within bundle
#     type: 'define' or 'require'
#     dependencies: Array of dependencies, as delcared in the original AMD, (eg 'views/PersonView'
#     frDependencies: Array for file-relative dependencies, as required by node (eg '../PersonView')
#     parameters: Array of parameter names, as declared on the original AMD.
#     rootExports: the name of the root variable to export on the browser side (or false/absent)
#     factoryBody: The actual code that returns our module (define) or just runs some code having dependencies resolved (require).
#  }
#

UMDtemplate = (d)->
#todo: recognise define [], -> or require [], -> and adjust both node & browser UMD accordingly
#todo: make node part really async with timeout
#todo: make unit tests
  """
    // generated by myRequire v#{d.version}, (C) AnoDyNoS 2012, License: MIT
    (function (root, factory) {
        if (typeof exports === 'object') {

              var makeRequire = require('myRequire').getMakeRequire();
              var asyncRequire = makeRequire('#{d.modulePath}');
              module.exports = factory(asyncRequire#{
                # remove path logic from here - keep it a template only!
                (", require('#{nDep}')" for nDep in d.frDependencies).join('')

              });

        } else if (typeof define === 'function' && define.amd) {
            // AMD. Register as an anonymous module.
            define(['require'#{(", '#{dep}'" for dep in d.dependencies).join('')}], #{
            if d.rootExports # Adds browser/root globals if needed
              "function (require#{(', ' + par for par in d.parameters).join('')}) { \n" +
              "#{pd}   return (root.#{d.rootExports} = factory(require#{(', ' + par for par in d['arguments']).join('')})); \n" +
              "#{pd} });"
            else
              'factory);'
            }
        }
    }(this, function(require#{ (", #{par}" for par in d.parameters).join ''}) {
        #{d.factoryBody}
    }));
 """


module.exports = UMDtemplate