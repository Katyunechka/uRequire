_B = require 'uberscore'
l = new _B.Logger 'AlmondOptimizationTemplates'

Template = require './Template'

module.exports =

class AlmondOptimizationTemplates extends Template
  Function::property = (p)-> Object.defineProperty @::, n, d for n, d of p
  Function::staticProperty = (p)=> Object.defineProperty @::, n, d for n, d of p
  constructor:->@_constructor.apply @, arguments

  _constructor: (@ti)->

  @property wrap: get:->
    start: """
      // Combined file generated by uRequire v#{l.VERSION}, with help from r.js & almond
      (function (){
        #{@runTimeDiscovery}

        var __global = null,
            __nodeRequire = function(){};

        if (__isNode) {
            __nodeRequire = require;
            __global = global;
        } else {
            __global = window;
        };

        factory = function() {
    """

    end: """\n
            return require('#{@ti.main}');
        };

        if (__isAMD) {
            define([#{("'#{globalDep}'" for globalDep, globalVars of @ti.globalDepsVars).join(', ')}], factory);
        } else {
            if (__isNode) {
                module.exports = factory();
            } else {
                factory();
            }
        }
      })();
    """

  # @return {
  #   lodash: 'getGlobal_lodash',
  #   backbone: 'getGlobal_backbone'
  # }
  @property paths: get:->
    _paths = {}
    for globalDep, globalVars of @ti.globalDepsVars
      _paths[globalDep] = "getGlobal_#{globalDep}"

    for noWebDep in @ti.noWeb
      _paths[noWebDep] = "getNoWebDep_#{noWebDep}"

    _paths

  # @return {
  #   getGlobal_lodash: "code",
  #   getGlobal_backbone: "code"
  # }
  @property dependencyFiles: get:->
    _dependencyFiles = {}
    for globalDep, globalVars of @ti.globalDepsVars
      _dependencyFiles["getGlobal_#{globalDep}"] =
        @grabDependencyVarOrRequireIt globalDep, globalVars

    for noWebDep in @ti.noWeb
      _dependencyFiles["getNoWebDep_#{noWebDep}"] =
        @grabDependencyVarOrRequireIt noWebDep, [] #"noWebDep_"+noWebDep

#        "define(" +
#            @_function("""
#              if (typeof #{globalVars[0]} === "undefined") {
#                return __nodeRequire("#{globalDep}");
#              } else {
#                return #{globalVars[0]};
#              };
#            """) +
#        ");"

    _dependencyFiles

  # @todo:(7 7 1) Try to find all variables, not just the first!
  grabDependencyVarOrRequireIt: (dep, depVars)->
     "define(" +
        @_function(

          ("if (typeof #{depVar} !== 'undefined'){return #{depVar};}" for depVar in depVars).join(';') +

          "return __nodeRequire('#{dep}');"
        ) + ");"

#a = new AlmondOptimizationTemplates {
#  globals:
#    lodash: ['_', 'lodash']
#    backbone: ['Backbone']
#  main: "uBerscore"
#  globalDepsVars:
#    underscore: ['_']
#    knockout: ['ko', 'KO']
#  noWeb:["utils", "fs"]
#  }
#
#lp = (o)-> console.log require('util').inspect o, false, null, true
#
#lp a.dependencyFiles
