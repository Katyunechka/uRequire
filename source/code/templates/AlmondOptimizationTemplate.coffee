_B = require 'uberscore'
l = new _B.Logger 'urequire/AlmondOptimizationTemplates'

Template = require './Template'

module.exports =

class AlmondOptimizationTemplates extends Template
  Function::property = (p)-> Object.defineProperty @::, n, d for n, d of p ;null
  Function::staticProperty = (p)=> Object.defineProperty @::, n, d for n, d of p ;null

  constructor: (@ti)->

  @property wrap: get:->
    start: """
      // Combined file generated by uRequire v#{l.VERSION}, with help from r.js & almond
      (function (){
        #{@runTimeDiscovery}

        var __global = null,
            __nodeRequire = function(){};

        if (__isNode) {
            __nodeRequire = require;
            __global = global;
        } else {
            __global = window;
        };

        factory = function() {
    """

    end: """\n
            return require('#{@ti.main}');
        };

        if (__isAMD) {
            define([#{("'#{globalDep}'" for globalDep, globalVars of @ti.globalDepsVars).join(', ')}], factory);
        } else {
            if (__isNode) {
                module.exports = factory();
            } else {
                factory();
            }
        }
      })();
    """

  # @return {
  #   lodash: 'getGlobal_lodash',
  #   backbone: 'getGlobal_backbone'
  # }
  @property paths: get:->
    _paths = {}
    for globalDep, globalVars of @ti.globalDepsVars
      _paths[globalDep] = "getGlobal_#{globalDep}"

    for nodeOnlyDep in @ti.nodeOnly
      _paths[nodeOnlyDep] = "getNodeOnly_#{nodeOnlyDep}"

    _paths

  # @return {
  #   getGlobal_lodash: "code",
  #   getGlobal_backbone: "code"
  # }
  @property dependencyFiles: get:->
    _dependencyFiles = {}
    for globalDep, globalVars of @ti.globalDepsVars
      _dependencyFiles["getGlobal_#{globalDep}"] =
        @grabDependencyVarOrRequireIt globalDep, globalVars

    for nodeOnlyDep in @ti.nodeOnly
      _dependencyFiles["getNodeOnly_#{nodeOnlyDep}"] =
        @grabDependencyVarOrRequireIt nodeOnlyDep, []

    _dependencyFiles

  grabDependencyVarOrRequireIt: (dep, depVars)->
     "define(" +
        @_function(
          ("if (typeof #{depVar} !== 'undefined'){return #{depVar};}" for depVar in depVars).join(';') +
          "\nreturn __nodeRequire('#{dep}');"
        ) + ");"

