pathRelative = require('../paths/pathRelative')
_ = require 'lodash'
#
#  A 'simple' template for a UMD module. Based on https://github.com/umdjs/umd/blob/master/returnExportsGlobal.js
#
#  @param o {Object} with
#   {
#     modulePath: where the module is, within bundle
#     moduleName: the moduleName, if it exists.
#     moduleType: type of the original module : 'nodejs' or 'AMD'
#     type: 'define' or 'require': NOT USED
#     arrayDependencies: Array of deps, as delcared in AMD, filerelative (eg '../PersonView' for 'views/PersonView') + all `require('dep')`
#     nodeDependencies: Array for file-relative dependencies, as required by node (eg '../PersonView')
#     parameters: Array of parameter names, as declared on the original AMD.
#     rootExport: the name of the root variable to export on the browser side (or false/absent)
#     factoryBody: The actual code that returns our module (define) or just runs some code having dependencies resolved (require).
#     webRootMap: path of where to map '/' when running on node, relative to bundleRoot (starting with '.'), absolute OS path otherwise.
#  }
#
# @todo: recognise define [], -> or require [], -> and adjust both node & browser UMD accordingly
# @todo: make unit tests

class ModuleGeneratorTemplates
  constructor: (@o)->
    @header = "// Generated by uRequire v#{@o.version}"

    @moduleNamePrint = if o.moduleName then "'#{o.moduleName}', " else ""

    ### @property parameters of the factory method, eg 'require, _, personModel' ###
    @parametersPrint = """
      require#{if (o.moduleType is 'nodejs') then ', exports, module' else ''}#{
      (", #{par}" for par in o.parameters).join ''}
    """

    ### @property arrayDependencies of define [], eg "['require', 'lodash', 'PersonModel']" ###
    @arrayDependenciesPrint = """
      #{if _(o.arrayDependencies).isEmpty()
          "" #keep empty [] not existent, enabling requirejs scan
        else
          if o.moduleType is 'nodejs'
            "['require', 'module', 'exports'"
          else
            "['require'"}#{(", '#{dep}'" for dep in o.arrayDependencies).join('')} #{
          if _(o.arrayDependencies).isEmpty() then "" else "], "
      }
    """

    @bodyStart = "// uRequire: start body of original #{o.moduleType} module"
    @bodyEnd = "// uRequire: end body of original #{o.moduleType} module"


    @factoryBodyInjects = """
      var isWeb = (typeof define === 'function' && define.amd),
          isNode = !isWeb;
    """

    ### @property factoryBody with braces.
        Includes original (with replaced require paths) + injections like isWeb, isNode etc.
    ###
    @factoryBodyUMDPrint = """
      #{@factoryBodyInjects}

      #{@bodyStart}
      #{@o.factoryBody}
      #{@bodyEnd}

      #{ if (@o.moduleType is 'nodejs') then '\nreturn module.exports;' else '' }
    """




  ### UMD template - runs AS-IS on both Web/AMD and nodejs (having 'npm install urequire').
      * Uses `NodeRequirer` to perform `require`s.
  ###
  UMD: ->"""
    #{@header}
    (function (root, factory) {
      if (typeof exports === 'object') {
        var nr = new (require('urequire').NodeRequirer) ('#{@o.modulePath}', __dirname, '#{@o.webRootMap}');
        module.exports = factory(nr.require#{
          if (@o.moduleType is 'nodejs') then ', exports, module' else ''}#{
          (", nr.require('#{nDep}')" for nDep in @o.nodeDependencies).join('')});
      } else if (typeof define === 'function' && define.amd) {
          define(#{@moduleNamePrint}#{@arrayDependenciesPrint}#{
            if @o.rootExport # Adds browser/root globals if needed
              "function (#{@parametersPrint}) { \n" +
              "          return (root.#{@o.rootExport} = factory(#{@parametersPrint}));\n" +
              "        });"
            else
              'factory);'
          }
      }
    }) (this, function (#{@parametersPrint}) {\n #{@factoryBodyUMDPrint} \n});
  """

  ### AMD template
      Simple `define(['dep'], function(dep){...body...}})`
      Runs only on WEB/AMD/RequireJs (and hopefully soon in node through uRequire'd *driven* RequireJS).
  ###
  AMD: ->
    @header + '\n' + """
      define(#{@moduleNamePrint}#{@arrayDependenciesPrint}
        function (#{@parametersPrint}) {
    """ + ( if not @o.rootExport # 'standard' AMD format
              @factoryBodyUMDPrint
            else # ammend to export window = @o.rootExport
              """
                  return (window.#{@o.rootExport} = (
                    function (#{@parametersPrint}) {
                      #{@factoryBodyUMDPrint}
                    }(#{@parametersPrint}))
                  );
              """
        ) +
      "});" # thank you jashkenas! see his coffeescript presentation, ending with }); what a joy!


  nodejs: -> """
      #{@header}#{
        if @o.parameters.length > 0 then "\nvar" else ''} #{
        ("#{if paramIdx is 0 then '' else '    '}#{param} = require('#{@o.nodeDependencies[paramIdx]}')#{
          if paramIdx < @o.parameters.length-1 then ',\n' else ';'}" for param, paramIdx in @o.parameters).join('')
      }

      #{@factoryBodyInjects}

      #{@bodyStart}
      #{ if @o.moduleType is 'AMD'
          "module.exports = (function() {\n #{@o.factoryBody} })()"
        else
          @o.factoryBody
      }
      #{@bodyEnd}
    """

module.exports = ModuleGeneratorTemplates